<?php
// $Id$

/**
 * @file
 * Dynamic image resizer and image cacher.
 *
 * Imagecache allows you to setup specialized identifiers for dynamic image
 * processing and caching. It abuses the rewrite rules used for drupal's clean
 * URLs to provide dynamic image generation.
 * 
 * Earlier security flaws were overcome by using 'presets' similar to
 * image.module. We don't fuss with the database, and creating data that we have
 * to keep up within Drupal. We do it on the fly and flush it when we want to,
 * or when a preset changes.
 * 
 * URLs are of the form: files/imagecache/<preset>/path
 * 
 * @todo: improve image resizing, reduce distortion.
 * @todo: add watermarking capabilities.
 * @todo: split action/handlers into their own little .inc files.
 * @todo: enforce permissions.
 * 
 * Notes:
 *   To add a new handler,
 *     add fields and select option to _imagecache_actions_form;
 *     add handling code to imagecache_cache
 * 
 */

/**
 * Implementation of hook_perm().
 */
function imagecache_perm() {
  $presets = _imagecache_get_presets();

  $perms =  array('administer imagecache', 'flush imagecache');
  if ($presets = _imagecache_get_presets()) {
    foreach($presets as $preset_id => $preset_name) {
      $perms[] =  'view imagecache '. $preset_name;
    }
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function imagecache_menu($may_cache) {
  $items = array();
  if ($may_cache) {

    // standard imagecache callback.
    $items[] = array(
      'path' => file_directory_path() .'/imagecache', 
      'callback' => 'imagecache_cache',
      'access' => TRUE,
      'type' => MENU_CALLBACK
    );

    // private downloads imagecache callback 
    $items[] = array( 
      'path' => 'system/files/imagecache',
      'callback' => 'imagecache_cache_private',
      'access' => TRUE,
      'type' => MENU_CALLBACK
    );     

    // settings form.
    $items[] = array(
      'path' => 'admin/settings/imagecache',
      'title' => t('Image cache'),
      'description' => t('Configure rulesets and actions for imagecache.'),
      'access' => user_access('administer imagecache'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('imagecache_admin'),
    );
  }

  return $items;
}

/**
 * Implementation of hook_requirements().
 */
function imagecache_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  if ($phase == 'runtime') {
    // Check for an image library.
    if (count(image_get_available_toolkits()) == 0) {
      $requirements['clean_urls'] = array(
        'title' => $t('Image Toolkit'),
        'value' => $t('No image toolkits available'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('Imagecache requires an imagetoolkit such as <a href="http://php.net/gd">GD2</a> or <a href="http://www.imagemagick.org">Imagemagick</a> be installed on your server.'),
      );
    }
    // Check for JPEG/PNG/GIF support.
    if ('gd' == image_get_toolkit()) {
      foreach (array('gif', 'jpeg', 'png') as $format) {
        if (!function_exists('imagecreatefrom'. $format)) {
          $requirements['gd_'. $format] = array(
            'title' => $t('GD !format Support', array('!format' => drupal_ucfirst($format))),
            'value' => $t('Not installed'),
            'severity' => REQUIREMENT_INFO,
            'description' => $t('PHP was not compiled with %format support. Imagecache will not be able to process %format images.', array('%format' => $format)), 
          );
        }
      } 
    }
  }
  return $requirements;
}


/**
 * Implementation of hook_imagecache_actions.
 *
 * @return array
 *   An array of information on the actions implemented by a module. The array contains a 
 *   sub-array for each action node type, with the machine-readable action name as the key. 
 *   Each sub-array has up to 3 attributes. Possible attributes:
 * 
 *     "name": the human-readable name of the action. Required.
 *     "description": a brief description of the action. Required.
 *     "file": the name of the include file the action can be found 
 *             in relative to the implementing module's path.
 */
function imagecache_imagecache_actions() {
  $actions = array(
    'imagecache_resize' => array(
      'name' => 'Resize',
      'description' => 'Resize an image to an exact set of dimensions, ignoring aspect ratio.',
    ),
    'imagecache_scale' => array(
      'name' => 'Scale',
      'description' => 'Resize an image maintaining the original aspect-ratio (only one value necessary).',
      'file' => 'imagecache_actions.inc',
    ),
    'imagecache_deprecated_scale' => array(
      'name' => 'Deprecated Scale',
      'description' => 'Precursor to Scale and Crop. Has inside and outside dimension support. This action will be removed in Imagecache 2.1).',
      'file' => 'imagecache_actions.inc',
    ),
    'imagecache_scale_and_crop' => array(
      'name' => 'Scale And Crop',
      'description' => 'Resize an image to an exact set of dimensions, ignoring aspect ratio.',
      'file' => 'imagecache_actions.inc',
    ),
    'imagecache_crop' => array(
      'name' => 'Crop',
      'description' => 'Crop an image to the rectangle specified by the given offsets and dimensions.',
      'file' => 'imagecache_actions.inc',
    ),
    'imagecache_desaturate' => array(
      'name' => 'Desaturate',
      'description' => 'Convert an image to grey scale.',
      'file' => 'imagecache_actions.inc',
    ),
  );

  return $actions;
}

/**
 * Pull in actions exposed by other modules using hook_imagecache_actions().
 *
 * @param $reset
 *   Boolean flag indicating whether the cached data should be
 *   wiped and recalculated.
 *
 * @return
 *   An array of actions to be used when transforming images.
 */
function imagecache_action_definitions($reset = FALSE) {
  static $actions;
  if (!isset($actions) || $reset) {
    if (!$reset && ($cache = cache_get('imagecache_actions')) && !empty($cache->data)) {
      $actions = unserialize($cache->data);
    }
    else {
      foreach(module_implements('imagecache_actions') as $module) {
        foreach (module_invoke($module, 'imagecache_actions') as $key => $action) {
          $action['module'] = $module;
          if ($action['file']) {
            $action['file'] = drupal_get_path('module', $action['module']) .'/'. $action['file'];
          }
          $actions[$key] = $action;
        };
      }
      cache_set('imagecache_actions', 'cache', serialize($actions));
    }
  }
  return $actions;
}

 

/**
 * Return a URL that points to the location of a derivative of the
 * original image at @p $path, transformed with the given @p $preset.
 */
function imagecache_create_url($preset, $path) {
  $path = _imagecache_strip_file_directory($path);
  return file_create_url(file_directory_path() .'/imagecache/'. $preset .'/'. $path);
}

/**
 * Return a file system location that points to the location of a derivative
 * of the original image at @p $path, transformed with the given @p $preset.
 * Keep in mind that the image might not yet exist and won't be created.
 */
function imagecache_create_path($preset, $path) {
  $path = _imagecache_strip_file_directory($path);
  return file_create_path() .'/imagecache/'. $preset .'/'. $path;
}

/**
 * Remove a possible leading file directory path from the given path.
 */
function _imagecache_strip_file_directory($path) {
  $dirpath = file_directory_path();
  $dirlen = strlen($dirpath);
  if (substr($path, 0, $dirlen + 1) == $dirpath .'/') {
    $path = substr($path, $dirlen + 1);
  }
  return $path;
}


/** 
 * callback for handling public files imagecache requests.
 */
function imagecache_cache() {
  $args = func_get_args();
  $preset = check_plain(array_shift($args));
  $path = implode('/', $args);
  _imagecache_cache($preset, $path);
}

/**
 * callback for handling private files imagecache requests
 */
function imagecache_cache_private() {
  $args = func_get_args();
  $preset = check_plain(array_shift($args));
  $source = implode('/', $args);

  if (user_access('view imagecache '. $preset)) {
    _imagecache_cache($preset, $source);
  } 
  else {
    // if there is a 40333mage uploaded for the preset display it.
    $accesspath = file_create_path('imagecache/'. $preset .'.403.png');
    if (file_exists($accesspath)) {
      imagecache_transfer($accesspath);
      exit;
    }
    header('HTTP/1.0 403 Forbidden');
    exit;
  }
}

/**
 * handle request validation and responses to imagecache requests. 
 */
function _imagecache_cache($preset, $path) {

  if (!$preset_id = _imagecache_preset_load_by_name($preset)) {
    // send a 404 if we dont' know of a preset. 
    header("HTTP/1.0 404 Not Found");
    exit;
  }
  $src = file_create_path($path);
  if (!is_file($src)) {
    // if there is a 404 image uploaded for the preset display it.
    $notfoundpath = file_create_path('imagecache/'. $preset .'.404.png');
    if (file_exists($notfoundpath)) {
      imagecache_transfer($notfoundpath);
      exit;
    }
    // otherwise send a 404.
    header("HTTP/1.0 404 Not Found");
    exit;
  }

  $dst = imagecache_create_path($preset, $path);
  $tmp = file_directory_temp() .'/'. $preset . str_replace(dirname($src) .'/', '', $src);

  if (file_exists($tmp)) {
    watchdog('imagecache', t('Imagecache already generating: %dst, Lock file: %tmp.', array('%dst' => $dst, '%tmp' => $tmp)), WATCHDOG_NOTICE);
    // send a response code that will make the browser wait and reload in a 1/2 sec. 
    // header()
    exit;
  }

  $actions =  _imagecache_actions_get_by_presetid($preset_id);
 
  // check if deriv exists... (file was created between apaches request handler and reaching this code)
  // otherwise try to create the derivative. 
  if (!file_exists($dst) && !imagecache_build_derivative($actions, $src, $dst, $tmp)) {
    // Generate an error if image could not generate.
    watchdog('imagecache', t('Failed generating an image from %image using imagecache preset %preset.', array('%image' => $path, '%preset' => $preset)), WATCHDOG_ERROR);
    header("HTTP/1.0 500 Internal Server Error");
    // remove lock file on error.
    unlink($tmp);
    exit;
  } 
  imagecache_transfer($dst);
}

function _imagecache_apply_action($action, $image) {
  $actions = imagecache_action_definitions();
 
  if ($definition = $actions[$action['action']]) {
    if (!empty($definition['file'])) {
      require_once($definition['file']);
    }
    return call_user_func($action['action'] .'_image', $image, $action['data']);
  }
  // skip undefined actions.. module probably got uninstalled or disabled.
  watchdog('imagecache', t('non-existant action %action', array('%action' => $action['action'])), WATCHDOG_NOTICE);
  return TRUE;
}

/**
 * helper function to transfer files from imagecache. Determines mime type and sets a last modified header.
 * @param $path path to file to be transferred.
 * @return <exit>
 */

function imagecache_transfer($path) {
  if (function_exists('mime_content_type')) {
       $mime = mime_content_type($path);
  }
  else {
    $size = getimagesize($path);
    $mime = $size['mime'];
  }
  $headers = array('Content-Type: '. mime_header_encode($mime));
  if ($fileinfo = stat($path)) {
    $headers[] = 'Last-Modified: '. gmdate('D, d M Y H:i:s', $fileinfo[9]) .' GMT';
  }
  file_transfer($path, $headers);
  exit;
}

/**
 * A recursive mkdir.
 */
function _imagecache_mkdir($dir) {
  $folders = explode("/", $dir);

  foreach ($folders as $folder) {
    $dirs[] = $folder;
    $path = implode("/", $dirs);
    if (is_dir($path)) {
      continue;
    }
    if (is_file($path)) {
      watchdog('imagecache', t('file exists where we would like a directory: %path', array('%path' => $path)), WATCHDOG_ERROR);
      return FALSE;
    } 
    if (!@mkdir($path)) {
      watchdog('imagecache', t('Could not create destination: %dir halted at: %path', array('%dir' => $dir, '%path' => $path)), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  return TRUE;
}
 
/**
 * build an image cache derivative
 * 
 * @param $actions, array of imagecache actions.
 * @param $source, source file.
 * @param $dest, $destination file.
 * @return TRUE - derivative generated, FALSE - no derivative generated, NULL - derivative being generated
 */
function imagecache_build_derivative($actions, $src, $dst, $tmp) {
  // Copy src to tmp. We use the existence of tmp as a lock.
  if (!file_copy($src, $tmp)) {
    // can't copy source to temp... ack..
    watchdog('imagecache', t('Could not create temporary file: %path', array('%path' => $tmp)), WATCHDOG_ERROR);
    return FALSE;
  }

  // get the folder for the final location of this preset...
  $dir = dirname($dst);

  // Build the destination folder tree if it doesn't already exists.
  if (!file_check_directory($dir) && !_imagecache_mkdir($dir)) {
    watchdog('imagecache', t('Failed to create imagecache directory: %dir', array('%dir' => $dir)), WATCHDOG_ERROR);
    return FALSE;
  }

  foreach ($actions as $action) {
    $size = getimagesize($tmp);
    if (count($action['data'])) {
      $new_width = _imagecache_filter('width', $action['data']['width'], $size[0], $size[1]);
      $new_height = _imagecache_filter('height', $action['data']['height'], $size[0], $size[1]);
      foreach ($action['data'] as $key => $value) {
        $action['data'][$key] = _imagecache_filter($key, $value, $size[0], $size[1], $new_width, $new_height);
      }
    }
    if (!_imagecache_apply_action($action, $tmp)) {
      watchdog( 'imagecache', t('action(id:%id): %action failed for %src', array('%id' => $action['actionid'], '%action' => $action['action'], '%src' => $src)), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  if (!file_move($tmp, $dst)) {
    watchdog('imagecache', t('failed to move tmp(%tmp) to dst(%dst)', array('%tmp' => $tmp, '%dst' => $dst)), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

  



/**
 * Implementation of hook_field_formatter_info().
 */
function imagecache_field_formatter_info() {
  $presets = _imagecache_get_presets();
  foreach ($presets as $preset_id => $preset_name) {
    $formatters[$preset_name] = array(
      'label' => $preset_name,
      'field types' => array('image'),
    );
    $formatters[$preset_name .'_linked'] = array(
      'label' => $preset_name .' as link',
      'field types' => array('image'),
    );
  }
  return $formatters;
}

/**
 * Implementation of hook_field_formatter().
 */
function imagecache_field_formatter($field, $item, $formatter) {
  if (!isset($item['fid'])) {
    return '';
  }
  // Views does not load the file for us, while CCK display fields does.
  if (!isset($item['filepath'])) {
    $file = _imagecache_file_load($item['fid']);
    $item = array_merge($item, $file);
  }
  $rules = _imagecache_get_presets();
  $formatter_check = preg_replace('/_linked$/', '', $formatter);
  if (in_array($formatter_check, (array) $rules)) {
    return theme('imagecache_formatter', $field, $item, $formatter);
  }
}

function _imagecache_file_load($fid = NULL) {
  // Don't bother if we weren't passed an fid.
  if (isset($fid) && is_numeric($fid)) {
    $result = db_query('SELECT * FROM {files} WHERE fid = %d', $fid);
    $file = db_fetch_array($result);
  }
  return ($file) ? $file : array();
}

function _imagecache_get_presets($reset = FALSE) {
  static $presets = array();

  // Check caches if $reset is FALSE;
  if (!$reset) {
    if (!empty($presets)) {
      return $presets;
    }

    // Grab from cache saves building the array.
    // Plus it's a frequently used table.
    $cache = cache_get('imagecache:presets', 'cache');
    $presets = unserialize($cache->data);
    // If the preset is not an array, cache_clear_all has been called
    // there no/invalid data in the cache. Fall through and repopulate cache;
    if (is_array($presets)) {
      return $presets;
    }
  }

  // Load Data from the database on reset or if we get invalid data from the array.
  $presets = array();
  $result = db_query('SELECT * FROM {imagecache_preset} ORDER BY presetname');
  while ($row = db_fetch_array($result)) {
    $presets[$row['presetid']] = $row['presetname'];
  }
  cache_set('imagecache:presets', 'cache', serialize($presets));
  // Clear the content.module cache (refreshes the list of formatters provided by imagefield.module).
  if (module_exists('content')) {
    content_clear_type_cache();
  }
  return $presets;
}

function _imagecache_actions_get_by_presetid($presetid) {
  $actions = array();
  $result = db_query('SELECT * FROM {imagecache_action} where presetid = %d order by weight', $presetid);
  while ($row = db_fetch_array($result)) {
    $row['data'] = unserialize($row['data']);
    $actions[$row['actionid']] = $row;
  }
  return $actions;
}

/**
 * Filter key word values such as 'top', 'right', 'center', and also percentages.
 * All returned values are in pixels relative to the passed in height and width.
 */
function _imagecache_filter($key, $value, $current_width, $current_height, $new_width = NULL, $new_height = NULL) {
  switch ($key) {
    case 'width':
      $value = _imagecache_percent_filter($value, $current_width);
      break;
    case 'height':
      $value = _imagecache_percent_filter($value, $current_height);
      break;
    case 'xoffset':
      $value = _imagecache_keyword_filter($value, $current_width, $new_width);
      break;
    case 'yoffset':
      $value = _imagecache_keyword_filter($value, $current_height, $new_height);
      break;
  }
  return $value;
}

/**
 * Accept a percentage and return it in pixels.
 */
function _imagecache_percent_filter($value, $current_pixels) {
  if (strpos($value, '%') !== FALSE) {
    $value = str_replace('%', '', $value) * 0.01 * $current_pixels;
  }
  return $value;
}

/**
 * Accept a keyword (center, top, left, etc) and return it as an offset in pixels.
 */
function _imagecache_keyword_filter($value, $current_pixels, $new_pixels) {
  switch ($value) {
    case 'top':
    case 'left':
      $value = 0;
      break;
    case 'bottom':
    case 'right':
      $value = $current_pixels - $new_pixels;
      break;
    case 'center':
      $value = $current_pixels/2 - $new_pixels/2;
      break;
  }
  return $value;
}

function imagecache_admin() {
  drupal_set_title('Imagecache administration');
  $form = array();
  $form['title'] = array('#type' => 'markup', '#value' => t('Imagecache presets'));
  $form['presets']['#tree'] = TRUE;
  
  $presets = _imagecache_get_presets();
  foreach ($presets as $presetid => $presetname) {
    $form['presets'][$presetid] = array(
      '#type' => 'fieldset',
      '#title' => t($presetname),
      '#collapsible' => TRUE,
      '#collapsed' => arg(4) != $presetid,
    );
    $form['presets'][$presetid]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Preset namespace'),
      '#default_value' => $presetname,
      '#description' => t('String that will be used as an identifier in the url for this set of handlers. Final urls will look like http://example.com/files/imagecache/%namespace/&lt;path to orig&gt;', array('%namespace' => $presetname)),
    );
    $form['presets'][$presetid]['handlers'] = array(
      '#type' => 'fieldset',
      '#title' => t('Image handlers'),
    );

    $form['presets'][$presetid]['handlers']['#tree'] = FALSE;
    $form['presets'][$presetid]['handlers'] = _imagecache_actions_form($presetid);
    $form['presets'][$presetid]['ops']['#tree'] = FALSE;
    $form['presets'][$presetid]['ops']['update'] = array(
      '#type' => 'submit',
      '#name' => 'preset-op['. $presetid .']',
      '#value' => t('Update preset'),
    );
    $form['presets'][$presetid]['ops']['delete'] = array(
      '#type' => 'submit',
      '#name' => 'preset-op['. $presetid .']',
      '#value' => t('Delete preset'),
    );
    $form['presets'][$presetid]['ops']['flush'] = array(
      '#type' => 'submit',
      '#name' => 'preset-op['. $presetid .']',
      '#value' => t('Flush preset images'),
    );
  }

  $form['presets']['new'] = array(
    '#type' => 'fieldset',
    '#title' => t('New preset'),
    '#tree' => TRUE,
  );
  $form['presets']['new']['name'] = array(
    '#type' => 'textfield',
    '#size' => '64',
    '#title' => t('Preset namespace'),
    '#default_value' => '',
    '#description' => t('The namespace of an imagecache preset. It represents a series of actions to be performed when imagecache dynamically generates an image. This will also be used in the url for images. Please no spaces.'),
  );
  $form['presets']['new']['create'] = array(
    '#type' => 'submit',
    '#name' => 'preset-op[new]',
    '#value' => t('Create preset'),
    '#weight' => 10,
  );
  return $form;
}

function imagecache_admin_validate($form_id, $form_values) {
  if (is_array($_POST['preset-op'])) {
    foreach ($_POST['preset-op'] as $presetid => $op) {
      // Check for illegal characters in preset names
      if (preg_match('/[^0-9a-zA-Z_\-]/', $form_values['presets'][$presetid]['name'])) {
        form_set_error('presets]['. $presetid .'][name', t('Please only use alphanumic characters, underscores (_), and hyphens (-) for preset names.'));
      }
    }
  }
}

function imagecache_admin_submit($form_id, $form_values) {
  if (is_array($_POST['preset-op'])) {
    foreach ($_POST['preset-op'] as $presetid => $op) {
      $presetid = check_plain($presetid);
      switch ($op) {
        case t('Create preset'):
          _imagecache_preset_create($form_values['presets']['new']['name']);
          break;
        case t('Update preset'):
          // Add new actions
          $newaction = $form_values['presets'][$presetid]['handlers']['newaction'];
          if ($newaction) {
            drupal_set_message('new action: '. $newaction);
            $action = array(
               'presetid' => $presetid,
               'action' => $newaction,
               'weight' => 0,
               'data' => array(),
            );
            _imagecache_action_create($action);
          }
          // Update existing actions
          foreach ($form_values['presets'][$presetid]['handlers'] as $actionid => $action) {
            if ($actionid != 'newaction') {
              $action['actionid'] = $actionid;
              $action['presetid'] = $presetid;
              $remove = $action['remove'];
              unset($action['remove']);
              $remove ? _imagecache_action_delete($action) : _imagecache_action_update($action);
            }
          }
          // Update the entire preset.
          _imagecache_preset_update($presetid, $form_values['presets'][$presetid]['name']);
          break;
        case t('Delete preset'):
          _imagecache_preset_delete($presetid, $form_values['presets'][$presetid]['name']);
          break;
        case t('Flush preset images'):
          _imagecache_preset_flush($presetid);
          break;
      }
    }
  }
}

/**
 * Load a preset by id.
 * @param id
 *    Preset id.
 */
function _imagecache_preset_load($id) {
  $presets = _imagecache_get_presets();
  return $presets[$id];
}

/**
 * Load a preset by name.
 *  @param name
 *    Preset name.
 */
function _imagecache_preset_load_by_name($name) {
  $presets = array_flip(_imagecache_get_presets());
  return $presets[$name];
}

/**
 * Create a preset.
 * @param name
 *    Name of the preset to be created.
 */
function _imagecache_preset_create($name) {
  $next_id = db_next_id('{imagecache_preset}_presetid');
  db_query('INSERT INTO {imagecache_preset} (presetid, presetname) VALUES (%d, \'%s\')', $next_id, $name);

  // Reset presets cache.
  _imagecache_get_presets(TRUE);
  return $next_id;
}

/**
 * Update a preset.
 * @param id
 *    Preset id.
 * @param name
 *    new name for the preset
 */
function _imagecache_preset_update($id, $name) {
  $name = check_plain($name);
  $id = (int)$id;
  _imagecache_preset_flush($id);
  db_query('UPDATE {imagecache_preset} SET presetname =\'%s\' WHERE presetid = %d', $name, $id);
  drupal_set_message(t('Updated preset "%name" (ID: @id)', array('%name' => $name, '@id' => $id)));
  // Reset presets cache.
  _imagecache_get_presets(TRUE);
  $_REQUEST['destination'] = 'admin/settings/imagecache/preset/'. $id;
}

function _imagecache_preset_delete($id, $name) {
  _imagecache_preset_flush($id);
  db_query('DELETE FROM {imagecache_action} where presetid = %d', $id);
  db_query('DELETE FROM {imagecache_preset} where presetid = %d', $id);
  drupal_set_message(t('Preset "%name" (ID: @id) deleted.', array('%name' => $name, '@id' => $id)));
  // Reset presets cache.
  _imagecache_get_presets(TRUE);
}

/**
 * Flush cached media for a preset.
 * @param id
 *   A preset id.
 */
function _imagecache_preset_flush($id) {
  if (user_access('flush imagecache')) {
    drupal_set_message(t('Flushed Preset Images (ID: @id)', array('@id' => $id)));
    $preset = _imagecache_preset_load($id);
    $presetdir = realpath(file_directory_path() .'/imagecache/'. $preset);
    if (is_dir($presetdir)) {
      _imagecache_recursive_delete($presetdir);
    }
  }
}

/**
 * Recursively delete all files and folders in the specified filepath, then
 * delete the containing folder.
 *
 * Note that this only deletes visible files with write permission.
 *
 * @param string $path
 *   A filepath relative to file_directory_path.
 */
function _imagecache_recursive_delete($path) {
  $listing = $path .'/*';
  foreach (glob($listing) as $file) {
    if (is_file($file) === TRUE) {
      @unlink($file);
    }
    elseif (is_dir($file) === TRUE) {
      _imagecache_recursive_delete($file);
    }
  }
  @rmdir($path);
}

function _imagecache_action_create($action) {
  //debug_msg($action, 'action@create: ');
  $next_id = db_next_id('{imagecache_action}_actionid');
  db_query("INSERT INTO {imagecache_action} (actionid, presetid, weight, action, data) VALUES (%d, %d, %d,'%s', '%s')", $next_id, $action['presetid'], $action['weight'], $action['action'], serialize($action['data']));
}

function _imagecache_action_update($action) {
  //debug_msg($action, 'action@update');
  db_query("UPDATE {imagecache_action} SET weight=%d, data='%s' WHERE actionid=%d", $action['weight'], serialize($action['data']), $action['actionid']);
}

function _imagecache_action_delete($action) {
  _imagecache_preset_flush($action['presetid']);
  db_query('DELETE FROM {imagecache_action} WHERE actionid = %d', $action['actionid']);
}

function _imagecache_actions_form($presetid) { 
  $form = array();
  $actions = _imagecache_actions_get_by_presetid($presetid);
  $action_definitions = imagecache_action_definitions(TRUE);

  foreach ($actions as $actionid => $action) {
    if ($definition = $action_definitions[$action['action']]) {
      // include actions as needed...
      if (!empty($definition['file'])) {
        require_once($definition['file']);
      }
      $form[$actionid]['data'] = call_user_func($action['action'] .'_form', $action['data']);
  
      $form[$actionid]['#type'] = 'fieldset';
      $form[$actionid]['#title'] = t($definition['name']);
  
      $form[$actionid]['weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $action['weight'],
      );

      $form[$actionid]['action'] = array(
        '#type' => 'hidden',
        '#value' => $action['action'],
      );
 
      $form[$actionid]['remove'] = array(
        '#type' => 'checkbox',
        '#title' => t('Remove this action'),
      );
    }
  }

  $helptext = array();
  $options = array('' => t('Select...'));
  foreach ($action_definitions as $key => $action_definition) {
    $helptext[$key] = '<strong>'. t($action_definition['name']) .'</strong>: '. t($action_definition['description']);
    $options[$key] = $action_definition['name'];
  }
 
  $description = '<ul><li>'. implode('</li><li>', $helptext) .'</li><ul>';

  $form['newaction'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Add a new action'),
    '#description' => $description,
  );

  return $form;
}

/**
  * Theme an img tag for displaying the image.
  */
function theme_imagecache_display($node, $label, $url, $attributes) {
  return '<img src="'. check_url($url) .'" alt="'. check_plain($node->title) .'" title="'. check_plain($node->title) .'" '. drupal_attributes($attributes) .' />';
}

/**
 * Verify the image module and toolkit settings.
 */
function _imagecache_check_settings() {
  // Sanity check : make sure we've got a working toolkit.
  if (!image_get_toolkit()) {
    drupal_set_message(t('Make sure you have a working image toolkit installed and enabled, for more information see: %settings.', array('%settings' => l(t('Image toolkit settings'), 'admin/settings/image-toolkit'))), 'error');
    return FALSE;
  }
  return TRUE;
}

function theme_imagecache_admin($form) {
  $output = '';
  $output .= '<p class="cvs-version">$Id$</p>';
  $output .= '<h2>'. drupal_render($form['title']) .'</h2>';
  $output .= drupal_render($form);
  return $output;
}

function theme_imagecache_formatter($field, $item, $formatter) {
  if (preg_match('/_linked$/', $formatter)) {
    $formatter = preg_replace('/_linked$/', '', $formatter);
    $image = theme('imagecache', $formatter, $item['filepath'], $item['alt'], $item['title']);
    $output = l($image, 'node/'. $item['nid'], array(), NULL, NULL, FALSE, TRUE);
  }
  else {
    $output = theme('imagecache', $formatter, $item['filepath'], $item['alt'], $item['title']);
  }
  return $output;
}

function theme_imagecache($namespace, $path, $alt = '', $title = '', $attributes = NULL) {
  $attributes = drupal_attributes($attributes);

  $imagecache_path = imagecache_create_url($namespace, $path);
  return '<img src="'. $imagecache_path .'" alt="'. check_plain($alt) .'" title="'. check_plain($title) .'" '. $attributes .' />';
}

/**
 * Clear cached versions of a specific file in all presets.
 * @param $path
 *   The Drupal file path to the original image.
 */
function imagecache_image_flush($path) {
  $presets = _imagecache_get_presets();
  foreach ($presets as $presetid => $presetname) {
    $ipath = file_directory_path() .'/imagecache/'. $presetname .'/'. $path;
    file_delete($ipath);
  }
}

if (!function_exists('image_scale_and_crop')) {
  /**
   * Scales an image to the given width and height by scaling and cropping.
   *
   * The resulting image always has the exact target dimensions.
   *
   * @param $source         The file path of the source image
   * @param $destination    The file path of the destination image
   * @param $width          The target width
   * @param $height         The target height
   *
   * @return True or FALSE, based on success
   */
  function image_scale_and_crop($source, $destination, $width, $height) {
    $info = image_get_info($source);

    $scale = max($width / $info['width'], $height / $info['height']);
    $x = round(($info['width'] * $scale - $width) / 2);
    $y = round(($info['height'] * $scale - $height) / 2);

    if (image_toolkit_invoke('resize', array($source, $destination, $info['width'] * $scale, $info['height'] * $scale))) {
      return image_toolkit_invoke('crop', array($destination, $destination, $x, $y, $width, $height));
    }
  }
}


function imagecache_resize_image($image, $data) {
  if (!image_resize($image, $image, $data['width'], $data['height'])) {
    watchdog('imagecache', t('imagecache_resize_image failed. image: %image, data: %data.', array('%path' => $image, '%data' => print_r($data, TRUE))), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

function imagecache_resize_form($action) {
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $action['width'],
    '#description' => t('Enter a width in pixels or as a percentage. i.e. 500 or 80%.'),
  );
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $action['height'],
    '#description' => t('Enter a height in pixels or as a percentage. i.e. 500 or 80%.'),
  );
  return $form;
}


